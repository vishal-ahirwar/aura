{
  "username": "",
  "cpp": {
    "project": {
      "console": {
        "cmake": "#Auto Genrated CMake file by Flick CLI\n#@COPYRIGHT\ncmake_minimum_required(VERSION 3.6...3.31)\nproject(@name VERSION 1.0.0 LANGUAGES CXX)\n\nset(CMAKE_CXX_STANDARD 20)\nset(CMAKE_CXX_STANDARD_REQUIRED True)\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n\noption(STATIC_LINK \"Enable static linking\" ON)\noption(ENABLE_TESTS \"Enable tests\" OFF)\n\n# Apply static linking if enabled\nif(STATIC_LINK)\n  message(STATUS \"Static linking enabled\")\n  # Ensure static runtime linking on Windows\n  if (WIN32)\n      set(CMAKE_MSVC_RUNTIME_LIBRARY \"MultiThreaded$<$<CONFIG:Debug>:Debug>\")\n  else()\n      set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -static\")\n  endif()\nendif()\n\nset(COMPANY \"@DeveloperName\")\nstring(TIMESTAMP CURRENT_YEAR \"%Y\")\nset(COPYRIGHT \"Copyright(c) ${CURRENT_YEAR} ${COMPANY}.\")\n\ninclude_directories(src ${CMAKE_BINARY_DIR})\nconfigure_file(@config_in @config_h)\n\n#@find Warning: Do not remove this line\n\nif(NOT ENABLE_TESTS)\n    message(STATUS \"Tests are disabled\")\nfile(GLOB SOURCES \"src/*.cc\" \"src/*/*.cc\")\nadd_executable(${PROJECT_NAME} ${SOURCES})\n\nif (CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n    message(STATUS \"Enabling secure coding features for Clang\")\n    target_compile_options(${PROJECT_NAME} PRIVATE\n        -Wall -Wextra -Wpedantic        # General warnings\n        -Wshadow -Wold-style-cast       # Detect potential issues\n        -Wcast-align -Wnull-dereference # Runtime safety\n        -Wformat=2 -Wformat-security    # Secure formatting\n        -fstack-protector-strong        # Stack protection\n        -D_FORTIFY_SOURCE=2             # Buffer security\n        -fno-common                     # Avoid common symbol issues\n        #-Werror                         # Treat warnings as errors\n    )\nendif()\n\ninstall(TARGETS ${PROJECT_NAME} DESTINATION bin)\n#@link Warning: Do not remove this line\n\nelse()\n    message(STATUS \"Tests are enabled\")\n    find_package(GTest)\n    enable_testing()\n    file(GLOB TEST_SOURCES \"tests/*.cc\")\n    add_executable(tests ${TEST_SOURCES})\n    target_link_libraries(tests GTest::GTest GTest::Main)\nendif()",
        "cc": "//Auto Genrated C++ file by Flick CLI\n//@COPYRIGHT\n#include<iostream>\n_HEADER_\nint main(int argc,char*argv[])\n{\n    std::cerr << \"Hello, \" << Project::COMPANY_NAME << std::endl;\n    std::cerr << Project::PROJECT_NAME << \" v\" << Project::VERSION_STRING << std::endl;\n    std::cerr << Project::COPYRIGHT_STRING << std::endl;\n    for(int i=0;i<argc;++i){\n      std::cerr<<argv[i]<<std::endl;\n    }\n    return 0;\n}"
      },
      "library": {
        "cmake": "#Auto Genrated CMake file by Flick CLI\n#@COPYRIGHT\ncmake_minimum_required(VERSION 3.6...3.31)\nproject(@name VERSION 1.0.0 LANGUAGES CXX)\n\nset(CMAKE_CXX_STANDARD 20)\nset(CMAKE_CXX_STANDARD_REQUIRED True)\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n\noption(STATIC_LINK \"Enable static linking\" ON)\noption(ENABLE_TESTS \"Enable tests\" OFF)\n\n# Apply static linking if enabled\nif(STATIC_LINK)\n  message(STATUS \"Static linking enabled\")\n  # Ensure static runtime linking on Windows\n  if (WIN32)\n      set(CMAKE_MSVC_RUNTIME_LIBRARY \"MultiThreaded$<$<CONFIG:Debug>:Debug>\")\n  else()\n      set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -static\")\n  endif()\nendif()\n\nset(COMPANY \"@DeveloperName\")\nstring(TIMESTAMP CURRENT_YEAR \"%Y\")\nset(COPYRIGHT \"Copyright(c) ${CURRENT_YEAR} ${COMPANY}.\")\n\ninclude_directories(src ${CMAKE_BINARY_DIR})\nconfigure_file(@config_in @config_h)\n\n#@find Warning: Do not remove this line\n\nif(NOT ENABLE_TESTS)\n    message(STATUS \"Tests are disabled\")\nfile(GLOB SOURCES \"src/*.cc\" \"src/*/*.cc\")\nadd_executable(${PROJECT_NAME} ${SOURCES})\n\nif (CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n    message(STATUS \"Enabling secure coding features for Clang\")\n    target_compile_options(${PROJECT_NAME} PRIVATE\n        -Wall -Wextra -Wpedantic        # General warnings\n        -Wshadow -Wold-style-cast       # Detect potential issues\n        -Wcast-align -Wnull-dereference # Runtime safety\n        -Wformat=2 -Wformat-security    # Secure formatting\n        -fstack-protector-strong        # Stack protection\n        -D_FORTIFY_SOURCE=2             # Buffer security\n        -fno-common                     # Avoid common symbol issues\n        #-Werror                         # Treat warnings as errors\n    )\nendif()\n\ninstall(TARGETS ${PROJECT_NAME} DESTINATION bin)\n#@link Warning: Do not remove this line\n\nelse()\n    message(STATUS \"Tests are enabled\")\n    find_package(GTest)\n    enable_testing()\n    file(GLOB TEST_SOURCES \"tests/*.cc\")\n    add_executable(tests ${TEST_SOURCES})\n    target_link_libraries(tests GTest::GTest GTest::Main)\nendif()",
        "cc": "//Auto Genrated C++ file by Flick CLI\n//@COPYRIGHT\n#include<iostream>\n_HEADER_\nint main(int argc,char*argv[])\n{\n    std::cerr << \"Hello, \" << Project::COMPANY_NAME << std::endl;\n    std::cerr << Project::PROJECT_NAME << \" v\" << Project::VERSION_STRING << std::endl;\n    std::cerr << Project::COPYRIGHT_STRING << std::endl;\n    for(int i=0;i<argc;++i){\n      std::cerr<<argv[i]<<std::endl;\n    }\n    return 0;\n}"
      },
      "qt": {
        "cmake": "#Auto Genrated CMake file by Flick CLI\n#@COPYRIGHT\ncmake_minimum_required(VERSION 3.6...3.31)\nproject(@name VERSION 1.0.0 LANGUAGES CXX)\n\nset(CMAKE_CXX_STANDARD 20)\nset(CMAKE_CXX_STANDARD_REQUIRED True)\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n\noption(STATIC_LINK \"Enable static linking\" ON)\noption(ENABLE_TESTS \"Enable tests\" OFF)\n\n# Apply static linking if enabled\nif(STATIC_LINK)\n  message(STATUS \"Static linking enabled\")\n  # Ensure static runtime linking on Windows\n  if (WIN32)\n      set(CMAKE_MSVC_RUNTIME_LIBRARY \"MultiThreaded$<$<CONFIG:Debug>:Debug>\")\n  else()\n      set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -static\")\n  endif()\nendif()\n\nset(COMPANY \"@DeveloperName\")\nstring(TIMESTAMP CURRENT_YEAR \"%Y\")\nset(COPYRIGHT \"Copyright(c) ${CURRENT_YEAR} ${COMPANY}.\")\n\ninclude_directories(src ${CMAKE_BINARY_DIR})\nconfigure_file(@config_in @config_h)\n\n#@find Warning: Do not remove this line\n\nif(NOT ENABLE_TESTS)\n    message(STATUS \"Tests are disabled\")\nfile(GLOB SOURCES \"src/*.cc\" \"src/*/*.cc\")\nadd_executable(${PROJECT_NAME} ${SOURCES})\n\nif (CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n    message(STATUS \"Enabling secure coding features for Clang\")\n    target_compile_options(${PROJECT_NAME} PRIVATE\n        -Wall -Wextra -Wpedantic        # General warnings\n        -Wshadow -Wold-style-cast       # Detect potential issues\n        -Wcast-align -Wnull-dereference # Runtime safety\n        -Wformat=2 -Wformat-security    # Secure formatting\n        -fstack-protector-strong        # Stack protection\n        -D_FORTIFY_SOURCE=2             # Buffer security\n        -fno-common                     # Avoid common symbol issues\n        #-Werror                         # Treat warnings as errors\n    )\nendif()\n\ninstall(TARGETS ${PROJECT_NAME} DESTINATION bin)\n#@link Warning: Do not remove this line\n\nelse()\n    message(STATUS \"Tests are enabled\")\n    find_package(GTest)\n    enable_testing()\n    file(GLOB TEST_SOURCES \"tests/*.cc\")\n    add_executable(tests ${TEST_SOURCES})\n    target_link_libraries(tests GTest::GTest GTest::Main)\nendif()",
        "cc": "//Auto Genrated C++ file by Flick CLI\n//@COPYRIGHT\n#include<iostream>\n_HEADER_\nint main(int argc,char*argv[])\n{\n    std::cerr << \"Hello, \" << Project::COMPANY_NAME << std::endl;\n    std::cerr << Project::PROJECT_NAME << \" v\" << Project::VERSION_STRING << std::endl;\n    std::cerr << Project::COPYRIGHT_STRING << std::endl;\n    for(int i=0;i<argc;++i){\n      std::cerr<<argv[i]<<std::endl;\n    }\n    return 0;\n}"
      }
    },
    "preset": "{\n  \"version\": 2,\n  \"configurePresets\": [\n    {\n      \"name\": \"default\",\n      \"generator\": \"Ninja\",\n      \"binaryDir\": \"${sourceDir}/build\",\n      \"cacheVariables\": {\n        \"CMAKE_TOOLCHAIN_FILE\": \"$env{VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake\",\n        \"CMAKE_CXX_COMPILER\": \"clang++\",\n        \"STATIC_LINK\": false\n      }\n    },\n    {\n      \"name\": \"windows-static-build\",\n      \"inherits\": \"default\",\n      \"cacheVariables\": {\n        \"VCPKG_TARGET_TRIPLET\": \"x64-windows-static\",\n        \"STATIC_LINK\": true\n      }\n    },\n    {\n      \"name\": \"linux-static-build\",\n      \"inherits\": \"default\",\n      \"cacheVariables\": {\n        \"VCPKG_TARGET_TRIPLET\": \"x64-linux\",\n        \"STATIC_LINK\": true\n      }\n    },\n    {\n      \"name\": \"osx-static-build\",\n      \"inherits\": \"default\",\n      \"cacheVariables\": {\n        \"VCPKG_TARGET_TRIPLET\": \"x64-osx\",\n        \"STATIC_LINK\": true\n      }\n    }\n  ]\n}",
    "test": "#include <gtest/gtest.h>\nint add(int a,int b){return a+b;};\nint subtract(int a,int b){return a-b;};\nTEST(CalculatorTest, Addition) {\n    EXPECT_EQ(add(3, 4), 7);\n    EXPECT_EQ(add(-1, 5), 4);\n}\n\nTEST(CalculatorTest, Subtraction) {\n    EXPECT_EQ(subtract(10, 3), 7);\n    EXPECT_EQ(subtract(7, 7), 0);\n}\n\nint main(int argc, char **argv) {\n    ::testing::InitGoogleTest(&argc, argv);\n    return RUN_ALL_TESTS();\n}"
  },
  "c": {
    "project": {
      "console": {
        "cmake": "#Auto Genrated CMake file by Flick CLI\n#@COPYRIGHT\ncmake_minimum_required(VERSION 3.6...3.31)\nproject(@name VERSION 1.0.0 LANGUAGES C)\n\nset(CMAKE_C_STANDARD 23)\nset(CMAKE_C_STANDARD_REQUIRED True)\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n\noption(STATIC_LINK \"Enable static linking\" ON)\noption(ENABLE_TESTS \"Enable tests\" OFF)\n\n# Apply static linking if enabled\nif(STATIC_LINK)\n  message(STATUS \"Static linking enabled\")\n  # Ensure static runtime linking on Windows\n  if (WIN32)\n      set(CMAKE_MSVC_RUNTIME_LIBRARY \"MultiThreaded$<$<CONFIG:Debug>:Debug>\")\n  else()\n      set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -static\")\n  endif()\nendif()\n\nset(COMPANY \"@DeveloperName\")\nstring(TIMESTAMP CURRENT_YEAR \"%Y\")\nset(COPYRIGHT \"Copyright(c) ${CURRENT_YEAR} ${COMPANY}.\")\n\ninclude_directories(src ${CMAKE_BINARY_DIR})\nconfigure_file(@config_in @config_h)\n\n#@find Warning: Do not remove this line\n\nif(NOT ENABLE_TESTS)\n    message(STATUS \"Tests are disabled\")\n\nfile(GLOB SOURCES \"src/*.c\" \"src/*/*.c\")\n\nadd_executable(${PROJECT_NAME} ${SOURCES})\n\nif(CMAKE_C_COMPILER_ID MATCHES \"Clang\")\n    message(STATUS \"Enabling secure coding features for Clang\")\n    target_compile_options(${PROJECT_NAME} PRIVATE\n        -Wall -Wextra -Wpedantic        # General warnings\n        -Wshadow -Wold-style-cast       # Detect potential issues\n        -Wcast-align -Wnull-dereference # Runtime safety\n        -Wformat=2 -Wformat-security    # Secure formatting\n        -fstack-protector-strong        # Stack protection\n        -D_FORTIFY_SOURCE=2             # Buffer security\n        -fno-common                     # Avoid common symbol issues\n        #-Werror                         # Treat warnings as errors\n    )\nendif()\n\ninstall(TARGETS ${PROJECT_NAME} DESTINATION bin)\n#@link Warning: Do not remove this line\nelse()\n    message(STATUS \"Tests are enabled\")\n    find_package(cmocka REQUIRED)\n    file(GLOB TEST_SOURCES \"tests/*.c\")\n    add_executable(tests ${TEST_SOURCES})\n    target_link_libraries(tests cmocka::cmocka)\nendif()",
        "c": "//Auto Genrated C file by Flick CLI\n//@COPYRIGHT\n#include<stdio.h>\n_HEADER_\nint main(int argc,char*argv[])\n{\n    fprintf_s(stdout,\"%s v%s %s\\n\",PROJECT_NAME,VERSION_STRING,COMPANY_NAME);\n    for(int i=0;i<argc;++i){\n      puts(argv[i]);\n    }\n    return 0;\n}"
      },
      "library": {
        "cmake": "#Auto Genrated CMake file by Flick CLI\n#@COPYRIGHT\ncmake_minimum_required(VERSION 3.6...3.31)\nproject(@name VERSION 1.0.0 LANGUAGES C)\n\nset(CMAKE_C_STANDARD 23)\nset(CMAKE_C_STANDARD_REQUIRED True)\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n\noption(STATIC_LINK \"Enable static linking\" ON)\noption(ENABLE_TESTS \"Enable tests\" OFF)\n\n# Apply static linking if enabled\nif(STATIC_LINK)\n  message(STATUS \"Static linking enabled\")\n  # Ensure static runtime linking on Windows\n  if (WIN32)\n      set(CMAKE_MSVC_RUNTIME_LIBRARY \"MultiThreaded$<$<CONFIG:Debug>:Debug>\")\n  else()\n      set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -static\")\n  endif()\nendif()\n\nset(COMPANY \"@DeveloperName\")\nstring(TIMESTAMP CURRENT_YEAR \"%Y\")\nset(COPYRIGHT \"Copyright(c) ${CURRENT_YEAR} ${COMPANY}.\")\n\ninclude_directories(src ${CMAKE_BINARY_DIR})\nconfigure_file(@config_in @config_h)\n\n#@find Warning: Do not remove this line\n\nif(NOT ENABLE_TESTS)\n    message(STATUS \"Tests are disabled\")\n\nfile(GLOB SOURCES \"src/*.c\" \"src/*/*.c\")\n\nadd_executable(${PROJECT_NAME} ${SOURCES})\n\nif(CMAKE_C_COMPILER_ID MATCHES \"Clang\")\n    message(STATUS \"Enabling secure coding features for Clang\")\n    target_compile_options(${PROJECT_NAME} PRIVATE\n        -Wall -Wextra -Wpedantic        # General warnings\n        -Wshadow -Wold-style-cast       # Detect potential issues\n        -Wcast-align -Wnull-dereference # Runtime safety\n        -Wformat=2 -Wformat-security    # Secure formatting\n        -fstack-protector-strong        # Stack protection\n        -D_FORTIFY_SOURCE=2             # Buffer security\n        -fno-common                     # Avoid common symbol issues\n        #-Werror                         # Treat warnings as errors\n    )\nendif()\n\ninstall(TARGETS ${PROJECT_NAME} DESTINATION bin)\n#@link Warning: Do not remove this line\nelse()\n    message(STATUS \"Tests are enabled\")\n    find_package(cmocka REQUIRED)\n    file(GLOB TEST_SOURCES \"tests/*.c\")\n    add_executable(tests ${TEST_SOURCES})\n    target_link_libraries(tests cmocka::cmocka)\nendif()",
        "c": "//Auto Genrated C file by Flick CLI\n//@COPYRIGHT\n#include<stdio.h>\n_HEADER_\nint main(int argc,char*argv[])\n{\n    fprintf_s(stdout,\"%s v%s %s\\n\",PROJECT_NAME,VERSION_STRING,COMPANY_NAME);\n    for(int i=0;i<argc;++i){\n      puts(argv[i]);\n    }\n    return 0;\n}"
      }
    },
    "preset": "{\n  \"version\": 2,\n  \"configurePresets\": [\n    {\n      \"name\": \"default\",\n      \"generator\": \"Ninja\",\n      \"binaryDir\": \"${sourceDir}/build\",\n      \"cacheVariables\": {\n        \"CMAKE_TOOLCHAIN_FILE\": \"$env{VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake\",\n        \"CMAKE_C_COMPILER\": \"clang\",\n        \"STATIC_LINK\": false\n      }\n    },\n    {\n      \"name\": \"windows-static-build\",\n      \"inherits\": \"default\",\n      \"cacheVariables\": {\n        \"VCPKG_TARGET_TRIPLET\": \"x64-windows-static\",\n        \"STATIC_LINK\": true\n      }\n    },\n    {\n      \"name\": \"linux-static-build\",\n      \"inherits\": \"default\",\n      \"cacheVariables\": {\n        \"VCPKG_TARGET_TRIPLET\": \"x64-linux\",\n        \"STATIC_LINK\": true\n      }\n    },\n    {\n      \"name\": \"osx-static-build\",\n      \"inherits\": \"default\",\n      \"cacheVariables\": {\n        \"VCPKG_TARGET_TRIPLET\": \"x64-osx\",\n        \"STATIC_LINK\": true\n      }\n    }\n  ]\n}",
    "test": "#include <stdarg.h>\n#include <stddef.h>\n#include <setjmp.h>\n#include <cmocka.h>\nint add(int a,int b){return a+b;};\nint subtract(int a,int b){return a-b;};\n\nstatic void test_add(void **state) {\n    (void) state; // Unused\n    assert_int_equal(add(3, 4), 7);\n    assert_int_equal(add(-1, 5), 4);\n}\n\nstatic void test_subtract(void **state) {\n    (void) state; // Unused\n    assert_int_equal(subtract(10, 3), 7);\n    assert_int_equal(subtract(7, 7), 0);\n}\n\nint main(void) {\n    const struct CMUnitTest tests[] = {\n        cmocka_unit_test(test_add),\n        cmocka_unit_test(test_subtract),\n    };\n\n    return cmocka_run_group_tests(tests, NULL, NULL);\n}"
  },
  "license": "Copyright (c) @_YEAR_, @_OWNER_\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this list of conditions, and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions, and the following disclaimer in the documentation or other materials provided with the distribution.\n3. Neither the name of the [organization] nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES,\nINCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\nIN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\nEVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
  "ignore": ".vs\nCMakeLists.txt.user\nCMakeCache.txt\nCMakeFiles\nCMakeScripts\nTesting\nMakefile\ncmake_install.cmake\ninstall_manifest.txt\ncompile_commands.json\nCTestTestfile.cmake\n_deps\nbuild\ninstall\n__pycache__\nlog.txt",
  "urls":{
    "windows": {
      "utool": "https://github.com/vishal-ahirwar/Flick/releases/latest/download/utool.exe",
      "compiler": "https://github.com/llvm/llvm-project/releases/download/llvmorg-19.1.7/clang+llvm-19.1.7-x86_64-pc-windows-msvc.tar.xz",
      "cmake": "https://github.com/Kitware/CMake/releases/download/v3.31.5/cmake-3.31.5-windows-x86_64.zip",
      "ninja": "https://github.com/ninja-build/ninja/releases/download/v1.12.1/ninja-win.zip",
      "vs_build_tools": "https://aka.ms/vs/17/release/vs_BuildTools.exe"
    },
    "linux": {
      "utool": "https://github.com/vishal-ahirwar/Flick/releases/latest/download/utool.x64",
      "compiler": "",
      "cmake": "",
      "ninja": ""
    },
    "osx": {
      "utool": "",
      "compiler": "",
      "cmake": "",
      "ninja": ""
    }
  }
}
