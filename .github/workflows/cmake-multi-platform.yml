name: Build and Release Flick
on:
  push:
    branches: [ "main", "master", "develop" ]  # trigger on push to main branches
  pull_request:
    branches: [ "main", "master" ]  # also run on PRs

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Clone vcpkg
        run: git clone https://github.com/microsoft/vcpkg.git vcpkg
        
      - name: Bootstrap vcpkg (Linux/macOS)
        if: runner.os != 'Windows'
        run: ./vcpkg/bootstrap-vcpkg.sh
        shell: bash
        
      - name: Bootstrap vcpkg (Windows)
        if: runner.os == 'Windows'
        run: .\vcpkg\bootstrap-vcpkg.bat
        shell: cmd
        
      - name: Set VCPKG_ROOT environment variable (Linux/macOS)
        if: runner.os != 'Windows'
        run: echo "VCPKG_ROOT=$(pwd)/vcpkg" >> $GITHUB_ENV
        shell: bash
        
      - name: Set VCPKG_ROOT environment variable (Windows)
        if: runner.os == 'Windows'
        run: echo "VCPKG_ROOT=$env:GITHUB_WORKSPACE\vcpkg" >> $env:GITHUB_ENV
        shell: powershell
        
      - name: Set CMAKE_PRESET environment variable
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            echo "CMAKE_PRESET=windows-static-build" >> $GITHUB_ENV
          elif [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            echo "CMAKE_PRESET=linux-static-build" >> $GITHUB_ENV
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            echo "CMAKE_PRESET=osx-static-build" >> $GITHUB_ENV
          fi
        shell: bash
        
      - name: Configure CMake with preset
        run: cmake --preset ${{ env.CMAKE_PRESET }}
        
      - name: Build with preset
        run: cmake --build --preset ${{ env.CMAKE_PRESET }} --config Release
        
      - name: Prepare artifacts folder
        run: |
          mkdir -p artifacts
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            cp ./build/windows-static-build/flick/Release/flick.exe artifacts/ || cp ./build/windows-static-build/flick/flick.exe artifacts/
            cp ./build/windows-static-build/flick/Release/utool.exe artifacts/ || cp ./build/windows-static-build/flick/utool.exe artifacts/
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            cp ./build/osx-static-build/flick/flick artifacts/
            cp ./build/osx-static-build/flick/utool artifacts/
          else
            cp ./build/linux-static-build/flick/flick artifacts/
            cp ./build/linux-static-build/flick/utool artifacts/
          fi
        shell: bash
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: flick-${{ matrix.os }}
          path: artifacts/

  release:
    needs: build
    runs-on: ubuntu-latest
    # Only create release on main/master branch pushes, not on PRs
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    permissions:
      contents: write
    steps:
      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: flick-windows-latest
          path: artifacts/windows
          
      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: flick-ubuntu-latest
          path: artifacts/linux
          
      - name: Download macOS artifact
        uses: actions/download-artifact@v4
        with:
          name: flick-macos-latest
          path: artifacts/macos
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: build-${{ github.sha }}
          name: Build ${{ github.sha }}
          body: |
            Automated build from commit ${{ github.sha }}
            
            **Branch:** ${{ github.ref_name }}
            **Commit:** ${{ github.event.head_commit.message }}
          files: |
            artifacts/windows/flick.exe
            artifacts/windows/utool.exe
            artifacts/linux/flick
            artifacts/linux/utool
            artifacts/macos/flick
            artifacts/macos/utool
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
